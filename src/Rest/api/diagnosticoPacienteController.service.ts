/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DiagnosticoPacienteControllerService {

    protected basePath = '//env-9292028.jelastic.saveincloud.net/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * findDiagnosticoByCedulaPaciente
     * 
     * @param cedula cedula
     * @param idDepartamento idDepartamento
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findDiagnosticoByCedulaPacienteUsingGET(cedula?: string, idDepartamento?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findDiagnosticoByCedulaPacienteUsingGET(cedula?: string, idDepartamento?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findDiagnosticoByCedulaPacienteUsingGET(cedula?: string, idDepartamento?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findDiagnosticoByCedulaPacienteUsingGET(cedula?: string, idDepartamento?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cedula !== undefined && cedula !== null) {
            queryParameters = queryParameters.set('cedula', <any>cedula);
        }
        if (idDepartamento !== undefined && idDepartamento !== null) {
            queryParameters = queryParameters.set('idDepartamento', <any>idDepartamento);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/diagnosticoP/findbyCedulaPaciente`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findFecha
     * 
     * @param fecha fecha
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findFechaUsingGET(fecha?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findFechaUsingGET(fecha?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findFechaUsingGET(fecha?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findFechaUsingGET(fecha?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/diagnosticoP/findFecha`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findHistoriaClinica
     * 
     * @param idHistoriaClinica idHistoriaClinica
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findHistoriaClinicaUsingGET(idHistoriaClinica?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findHistoriaClinicaUsingGET(idHistoriaClinica?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findHistoriaClinicaUsingGET(idHistoriaClinica?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findHistoriaClinicaUsingGET(idHistoriaClinica?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idHistoriaClinica !== undefined && idHistoriaClinica !== null) {
            queryParameters = queryParameters.set('idHistoriaClinica', <any>idHistoriaClinica);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/diagnosticoP/findbyHistoriaClinica`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findMedico
     * 
     * @param idMedico idMedico
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findMedicoUsingGET(idMedico?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findMedicoUsingGET(idMedico?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findMedicoUsingGET(idMedico?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findMedicoUsingGET(idMedico?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idMedico !== undefined && idMedico !== null) {
            queryParameters = queryParameters.set('idMedico', <any>idMedico);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/diagnosticoP/findbyMedico`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postDiaPaciente
     * 
     * @param diagnostico diagnostico
     * @param idHistoriaClinica idHistoriaClinica
     * @param idMedico idMedico
     * @param idPaciente idPaciente
     * @param medicacion medicacion
     * @param observacion observacion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postDiaPacienteUsingPOST(diagnostico?: string, idHistoriaClinica?: number, idMedico?: number, idPaciente?: number, medicacion?: string, observacion?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postDiaPacienteUsingPOST(diagnostico?: string, idHistoriaClinica?: number, idMedico?: number, idPaciente?: number, medicacion?: string, observacion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postDiaPacienteUsingPOST(diagnostico?: string, idHistoriaClinica?: number, idMedico?: number, idPaciente?: number, medicacion?: string, observacion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postDiaPacienteUsingPOST(diagnostico?: string, idHistoriaClinica?: number, idMedico?: number, idPaciente?: number, medicacion?: string, observacion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (diagnostico !== undefined && diagnostico !== null) {
            queryParameters = queryParameters.set('diagnostico', <any>diagnostico);
        }
        if (idHistoriaClinica !== undefined && idHistoriaClinica !== null) {
            queryParameters = queryParameters.set('idHistoriaClinica', <any>idHistoriaClinica);
        }
        if (idMedico !== undefined && idMedico !== null) {
            queryParameters = queryParameters.set('idMedico', <any>idMedico);
        }
        if (idPaciente !== undefined && idPaciente !== null) {
            queryParameters = queryParameters.set('idPaciente', <any>idPaciente);
        }
        if (medicacion !== undefined && medicacion !== null) {
            queryParameters = queryParameters.set('medicacion', <any>medicacion);
        }
        if (observacion !== undefined && observacion !== null) {
            queryParameters = queryParameters.set('observacion', <any>observacion);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/diagnosticoP/post`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

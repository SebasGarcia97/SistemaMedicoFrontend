/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { TblMedico } from '../model/tblMedico';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MedicoControllerService {

    protected basePath = '//localhost:9090/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * findByApellidoNombre
     * 
     * @param apellido apellido
     * @param nombre nombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByApellidoNombreUsingGET(apellido?: string, nombre?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TblMedico>>;
    public findByApellidoNombreUsingGET(apellido?: string, nombre?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblMedico>>>;
    public findByApellidoNombreUsingGET(apellido?: string, nombre?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblMedico>>>;
    public findByApellidoNombreUsingGET(apellido?: string, nombre?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apellido !== undefined && apellido !== null) {
            queryParameters = queryParameters.set('apellido', <any>apellido);
        }
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblMedico>>('get',`${this.basePath}/medico/findMedicoApellidoNombre`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByMedicoDepartamento
     * 
     * @param idDepartamento idDepartamento
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByMedicoDepartamentoUsingGET(idDepartamento?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TblMedico>>;
    public findByMedicoDepartamentoUsingGET(idDepartamento?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblMedico>>>;
    public findByMedicoDepartamentoUsingGET(idDepartamento?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblMedico>>>;
    public findByMedicoDepartamentoUsingGET(idDepartamento?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idDepartamento !== undefined && idDepartamento !== null) {
            queryParameters = queryParameters.set('idDepartamento', <any>idDepartamento);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblMedico>>('get',`${this.basePath}/medico/findMedicoDepartamento`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByid
     * 
     * @param idMedico idMedico
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByidUsingGET(idMedico?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findByidUsingGET(idMedico?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findByidUsingGET(idMedico?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findByidUsingGET(idMedico?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idMedico !== undefined && idMedico !== null) {
            queryParameters = queryParameters.set('idMedico', <any>idMedico);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/medico/findMedicoId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postMedico
     * 
     * @param apellido apellido
     * @param cedula cedula
     * @param direccion direccion
     * @param email email
     * @param fechNac fechNac
     * @param horaEntrada horaEntrada
     * @param horaSalida horaSalida
     * @param idDepartamento idDepartamento
     * @param idRol idRol
     * @param nombre nombre
     * @param telefono telefono
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postMedicoUsingPOST(apellido?: string, cedula?: string, direccion?: string, email?: string, fechNac?: string, horaEntrada?: string, horaSalida?: string, idDepartamento?: number, idRol?: number, nombre?: string, telefono?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postMedicoUsingPOST(apellido?: string, cedula?: string, direccion?: string, email?: string, fechNac?: string, horaEntrada?: string, horaSalida?: string, idDepartamento?: number, idRol?: number, nombre?: string, telefono?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postMedicoUsingPOST(apellido?: string, cedula?: string, direccion?: string, email?: string, fechNac?: string, horaEntrada?: string, horaSalida?: string, idDepartamento?: number, idRol?: number, nombre?: string, telefono?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postMedicoUsingPOST(apellido?: string, cedula?: string, direccion?: string, email?: string, fechNac?: string, horaEntrada?: string, horaSalida?: string, idDepartamento?: number, idRol?: number, nombre?: string, telefono?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {












        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apellido !== undefined && apellido !== null) {
            queryParameters = queryParameters.set('apellido', <any>apellido);
        }
        if (cedula !== undefined && cedula !== null) {
            queryParameters = queryParameters.set('cedula', <any>cedula);
        }
        if (direccion !== undefined && direccion !== null) {
            queryParameters = queryParameters.set('direccion', <any>direccion);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (fechNac !== undefined && fechNac !== null) {
            queryParameters = queryParameters.set('fechNac', <any>fechNac);
        }
        if (horaEntrada !== undefined && horaEntrada !== null) {
            queryParameters = queryParameters.set('horaEntrada', <any>horaEntrada);
        }
        if (horaSalida !== undefined && horaSalida !== null) {
            queryParameters = queryParameters.set('horaSalida', <any>horaSalida);
        }
        if (idDepartamento !== undefined && idDepartamento !== null) {
            queryParameters = queryParameters.set('idDepartamento', <any>idDepartamento);
        }
        if (idRol !== undefined && idRol !== null) {
            queryParameters = queryParameters.set('idRol', <any>idRol);
        }
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }
        if (telefono !== undefined && telefono !== null) {
            queryParameters = queryParameters.set('telefono', <any>telefono);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/medico/post`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
